#!/usr/bin/python

# -*- coding: utf-8 -*-

import sys, os, glob
from snack import *
from TasksProvider import TasksProvider

VERBOSE                 = True #False
SELECT_PLUGINS_FOR_TASK = False

class ChooseTaskAndRun():

  def get_exists_tasks(self):
    result = []

    exists_tasks = glob.glob('tasks/*Task.py')

    result = exists_tasks.sort()

    if True == VERBOSE:
      print "exists_tasks " + str(exists_tasks)

    if True == VERBOSE:
      print "get_exists_tasks() result " + str(result)

    return result

  def choose_tast_to_run(self):
    result = None

    defined_tasks = []

    exists_tasks = glob.glob('tasks/*Task.py')

    exists_tasks = exists_tasks.sort()

    if True == VERBOSE:
      print "exists_tasks " + str(exists_tasks)

    raise ValueError, "die()"

    for task in exists_tasks:
      if os.path.isfile(task):
        (path, task_full_filename) = os.path.split(task)
        (task_filename, file_extension) =  os.path.splitext(task_full_filename)
        defined_tasks.append(task_filename)
        if True == VERBOSE:
          print task_filename

    if True == VERBOSE:
      print defined_tasks

    tasks_tuple = tuple(defined_tasks)

    screen = SnackScreen()

    #screen.helpCallback(help)

    list_tasks_results = ListboxChoiceWindow(screen, 'Taskler task runner', 
          'Choose one task from the list below for running:', 
          tasks_tuple, default = 0,
          help = "Select one task for start")

    if True == VERBOSE:
      print 'list_tasks_results: ', list_tasks_results

    if 'ok' == list_tasks_results[0] and None <> list_tasks_results[1]:
      i = 0
      num = len(defined_tasks)
      while i < num:
          print list_tasks_results[1], i
          if list_tasks_results[1] == i:
            result = defined_tasks[i]
            break 
          i += 1

    if True == VERBOSE:
      print "Result: " + result

    if ( None <> result):
      if True == SELECT_PLUGINS_FOR_TASK:
  #  TODO: problem with getting plugins list assocciated w
  #      sys.path.insert(0, "tasks")
  #      tmp_task = __import__(result, None, None, ['TASK_PLUGINS'])

  #      obj = sys.modules[result].TASK_PLUGINS

  #      print "\n\n\ntmp_task: " + str(dir(obj))

  #      print "task plugins: " + tmp_task.task_set_verbose

        ct = CheckboxTree(5, scroll = 2)
        ct.append(result)
        ct.addItem("Plugin test 1", (0, snackArgs['append']), "red item key")
        ct.addItem("Plugin test 2", (0, snackArgs['append']))
        ct.addItem("Plugin test 3", (0, snackArgs['append']))

        g = GridForm(screen, "Plugins defined in selected task", 1, 2)
        g.add(ct, 0, 0, (0, 0, 0, 1))
        g.add(Button("Run selected task"), 0, 1)
        g.runOnce()

    screen.finish()

    return result

  def main(self):
    tast_to_run_name = self.choose_tast_to_run()

    if True == VERBOSE:
      print str(tast_to_run_name)

    if None <> tast_to_run_name:
      tasks_to_run  = [tast_to_run_name]
      inputed_data  = [1, 2]
      outputed_data = None

      # run tasks
      tasks_provider = TasksProvider()
      tasks_provider.plugin_set_verbose(True)
      tasks_provider.plugin_set_verbose(False)
      tasks_provider.task_set_verbose(False)
      outputed_data = tasks_provider.run_tasks(tasks_to_run, inputed_data)

      print outputed_data
    else:
      print "No task to run selected !"

if __name__ == "__main__":
  ChooseTaskAndRun().main()


